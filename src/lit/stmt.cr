# WARNING: This file is autogenerated! Please, don't edit it directly.

require "./token"

module Lit
  abstract class Stmt
    module Visitor(T)
      abstract def visit_break_stmt(stmt : Break) : T
      abstract def visit_next_stmt(stmt : Next) : T
      abstract def visit_type_stmt(stmt : Type) : T
      abstract def visit_expression_stmt(stmt : Expression) : T
      abstract def visit_function_stmt(stmt : Function) : T
      abstract def visit_return_stmt(stmt : Return) : T
      abstract def visit_var_stmt(stmt : Var) : T
    end

    class Break < Stmt
      getter keyword : Token

      def initialize(@keyword); end

      def accept(visitor : Visitor)
        visitor.visit_break_stmt(self)
      end
    end

    class Next < Stmt
      getter keyword : Token

      def initialize(@keyword); end

      def accept(visitor : Visitor)
        visitor.visit_next_stmt(self)
      end
    end

    class Type < Stmt
      getter name : Token
      getter methods : Array(Stmt::Function)

      def initialize(@name, @methods); end

      def accept(visitor : Visitor)
        visitor.visit_type_stmt(self)
      end
    end

    class Expression < Stmt
      getter expression : Expr

      def initialize(@expression); end

      def accept(visitor : Visitor)
        visitor.visit_expression_stmt(self)
      end
    end

    class Function < Stmt
      getter name : Token
      getter function : Expr::Function

      def initialize(@name, @function); end

      def accept(visitor : Visitor)
        visitor.visit_function_stmt(self)
      end
    end

    class Return < Stmt
      getter keyword : Token
      getter value : Expr?

      def initialize(@keyword, @value); end

      def accept(visitor : Visitor)
        visitor.visit_return_stmt(self)
      end
    end

    class Var < Stmt
      getter name : Token
      getter initializer : Expr
      getter? mutable : Bool

      def initialize(@name, @initializer, @mutable); end

      def accept(visitor : Visitor)
        visitor.visit_var_stmt(self)
      end
    end

    abstract def accept(visitor : Visitor)
  end
end
