# WARNING: This file is autogenerated! Please, don't edit it directly.

require "./token"

module Lit
  abstract class Expr
    module Visitor(T)
      abstract def visit_assign_expr(expr : Assign) : T
      abstract def visit_binary_expr(expr : Binary) : T
      abstract def visit_call_expr(expr : Call) : T
      abstract def visit_function_expr(expr : Function) : T
      abstract def visit_get_expr(expr : Get) : T
      abstract def visit_set_expr(expr : Set) : T
      abstract def visit_grouping_expr(expr : Grouping) : T
      abstract def visit_literal_expr(expr : Literal) : T
      abstract def visit_ternary_expr(expr : Ternary) : T
      abstract def visit_logical_expr(expr : Logical) : T
      abstract def visit_self_expr(expr : Self) : T
      abstract def visit_unary_expr(expr : Unary) : T
      abstract def visit_variable_expr(expr : Variable) : T
      abstract def visit_string_interpolation_expr(expr : StringInterpolation) : T
    end

    class Assign < Expr
      getter name : Token
      getter value : Expr

      def initialize(@name, @value); end

      def accept(visitor : Visitor)
        visitor.visit_assign_expr(self)
      end
    end

    class Binary < Expr
      getter left : Expr
      getter operator : Token
      getter right : Expr

      def initialize(@left, @operator, @right); end

      def accept(visitor : Visitor)
        visitor.visit_binary_expr(self)
      end
    end

    class Call < Expr
      getter callee : Expr
      getter paren : Token
      getter arguments : Array(Expr)

      def initialize(@callee, @paren, @arguments); end

      def accept(visitor : Visitor)
        visitor.visit_call_expr(self)
      end
    end

    class Function < Expr
      getter params : Array(Token)
      getter body : Array(Stmt)

      def initialize(@params, @body); end

      def accept(visitor : Visitor)
        visitor.visit_function_expr(self)
      end
    end

    class Get < Expr
      getter object : Expr
      getter name : Token

      def initialize(@object, @name); end

      def accept(visitor : Visitor)
        visitor.visit_get_expr(self)
      end
    end

    class Set < Expr
      getter object : Expr
      getter name : Token
      getter value : Expr

      def initialize(@object, @name, @value); end

      def accept(visitor : Visitor)
        visitor.visit_set_expr(self)
      end
    end

    class Grouping < Expr
      getter expression : Expr

      def initialize(@expression); end

      def accept(visitor : Visitor)
        visitor.visit_grouping_expr(self)
      end
    end

    class Literal < Expr
      getter value : Union(String | Float64 | Bool | Nil)

      def initialize(@value); end

      def accept(visitor : Visitor)
        visitor.visit_literal_expr(self)
      end
    end

    class Ternary < Expr
      getter condition : Expr
      getter left : Expr
      getter right : Expr
      getter operator : Token

      def initialize(@condition, @left, @right, @operator); end

      def accept(visitor : Visitor)
        visitor.visit_ternary_expr(self)
      end
    end

    class Logical < Expr
      getter left : Expr
      getter operator : Token
      getter right : Expr

      def initialize(@left, @operator, @right); end

      def accept(visitor : Visitor)
        visitor.visit_logical_expr(self)
      end
    end

    class Self < Expr
      getter keyword : Token

      def initialize(@keyword); end

      def accept(visitor : Visitor)
        visitor.visit_self_expr(self)
      end
    end

    class Unary < Expr
      getter operator : Token
      getter right : Expr

      def initialize(@operator, @right); end

      def accept(visitor : Visitor)
        visitor.visit_unary_expr(self)
      end
    end

    class Variable < Expr
      getter name : Token

      def initialize(@name); end

      def accept(visitor : Visitor)
        visitor.visit_variable_expr(self)
      end
    end

    class StringInterpolation < Expr
      getter parts : Array(Expr)
      getter token : Token

      def initialize(@parts, @token); end

      def accept(visitor : Visitor)
        visitor.visit_string_interpolation_expr(self)
      end
    end

    abstract def accept(visitor : Visitor)
  end
end
