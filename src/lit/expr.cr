# WARNING: This file is autogenerated! Please, don't edit it directly.

require "./token"

module Lit
  abstract class Expr
    module Visitor(T)
      abstract def visit_array_literal_expr(expr : ArrayLiteral) : T
      abstract def visit_block_expr(expr : Block) : T
      abstract def visit_map_literal_expr(expr : MapLiteral) : T
      abstract def visit_assign_expr(expr : Assign) : T
      abstract def visit_binary_expr(expr : Binary) : T
      abstract def visit_call_expr(expr : Call) : T
      abstract def visit_function_expr(expr : Function) : T
      abstract def visit_get_expr(expr : Get) : T
      abstract def visit_set_expr(expr : Set) : T
      abstract def visit_grouping_expr(expr : Grouping) : T
      abstract def visit_literal_expr(expr : Literal) : T
      abstract def visit_if_expr(expr : If) : T
      abstract def visit_import_expr(expr : Import) : T
      abstract def visit_logical_expr(expr : Logical) : T
      abstract def visit_match_expr(expr : Match) : T
      abstract def visit_self_expr(expr : Self) : T
      abstract def visit_unary_expr(expr : Unary) : T
      abstract def visit_variable_expr(expr : Variable) : T
      abstract def visit_var_expr(expr : Var) : T
      abstract def visit_string_interpolation_expr(expr : StringInterpolation) : T
      abstract def visit_loop_expr(expr : Loop) : T
      abstract def visit_break_expr(expr : Break) : T
      abstract def visit_next_expr(expr : Next) : T
      abstract def visit_return_expr(expr : Return) : T
      abstract def visit_while_expr(expr : While) : T
    end

    class ArrayLiteral < Expr
      getter elements : Array(Expr)

      def initialize(@elements); end

      def accept(visitor : Visitor)
        visitor.visit_array_literal_expr(self)
      end
    end

    class Block < Expr
      getter statements : Array(Stmt)

      def initialize(@statements); end

      def accept(visitor : Visitor)
        visitor.visit_block_expr(self)
      end
    end

    class MapLiteral < Expr
      getter entries : Array(Tuple(Expr, Expr))

      def initialize(@entries); end

      def accept(visitor : Visitor)
        visitor.visit_map_literal_expr(self)
      end
    end

    class Assign < Expr
      getter name : Token
      getter value : Expr

      def initialize(@name, @value); end

      def accept(visitor : Visitor)
        visitor.visit_assign_expr(self)
      end
    end

    class Binary < Expr
      getter left : Expr
      getter operator : Token
      getter right : Expr

      def initialize(@left, @operator, @right); end

      def accept(visitor : Visitor)
        visitor.visit_binary_expr(self)
      end
    end

    class Call < Expr
      getter callee : Expr
      getter paren : Token
      getter arguments : Array(Expr)

      def initialize(@callee, @paren, @arguments); end

      def accept(visitor : Visitor)
        visitor.visit_call_expr(self)
      end
    end

    class Function < Expr
      getter params : Array(Token)
      getter body : Array(Stmt)

      def initialize(@params, @body); end

      def accept(visitor : Visitor)
        visitor.visit_function_expr(self)
      end
    end

    class Get < Expr
      getter object : Expr
      getter name : Token

      def initialize(@object, @name); end

      def accept(visitor : Visitor)
        visitor.visit_get_expr(self)
      end
    end

    class Set < Expr
      getter object : Expr
      getter name : Token
      getter value : Expr

      def initialize(@object, @name, @value); end

      def accept(visitor : Visitor)
        visitor.visit_set_expr(self)
      end
    end

    class Grouping < Expr
      getter expression : Expr

      def initialize(@expression); end

      def accept(visitor : Visitor)
        visitor.visit_grouping_expr(self)
      end
    end

    class Literal < Expr
      getter value : Union(String | Int64 | Float64 | Bool | Nil)

      def initialize(@value); end

      def accept(visitor : Visitor)
        visitor.visit_literal_expr(self)
      end
    end

    class If < Expr
      getter condition : Expr
      getter then_branch : Expr
      getter else_branch : Expr?

      def initialize(@condition, @then_branch, @else_branch); end

      def accept(visitor : Visitor)
        visitor.visit_if_expr(self)
      end
    end

    class Import < Expr
      getter path : Token

      def initialize(@path); end

      def accept(visitor : Visitor)
        visitor.visit_import_expr(self)
      end
    end

    class Logical < Expr
      getter left : Expr
      getter operator : Token
      getter right : Expr

      def initialize(@left, @operator, @right); end

      def accept(visitor : Visitor)
        visitor.visit_logical_expr(self)
      end
    end

    class Match < Expr
      getter keyword : Token
      getter subject : Expr
      getter branches : Array(Tuple(Expr, Expr))

      def initialize(@keyword, @subject, @branches); end

      def accept(visitor : Visitor)
        visitor.visit_match_expr(self)
      end
    end

    class Self < Expr
      getter keyword : Token

      def initialize(@keyword); end

      def accept(visitor : Visitor)
        visitor.visit_self_expr(self)
      end
    end

    class Unary < Expr
      getter operator : Token
      getter right : Expr

      def initialize(@operator, @right); end

      def accept(visitor : Visitor)
        visitor.visit_unary_expr(self)
      end
    end

    class Variable < Expr
      getter name : Token

      def initialize(@name); end

      def accept(visitor : Visitor)
        visitor.visit_variable_expr(self)
      end
    end

    class Var < Expr
      getter name : Token
      getter initializer : Expr
      getter? mutable : Bool

      def initialize(@name, @initializer, @mutable); end

      def accept(visitor : Visitor)
        visitor.visit_var_expr(self)
      end
    end

    class StringInterpolation < Expr
      getter parts : Array(Expr)
      getter token : Token

      def initialize(@parts, @token); end

      def accept(visitor : Visitor)
        visitor.visit_string_interpolation_expr(self)
      end
    end

    class Loop < Expr
      getter body : Expr::Block

      def initialize(@body); end

      def accept(visitor : Visitor)
        visitor.visit_loop_expr(self)
      end
    end

    class Break < Expr
      getter keyword : Token
      getter value : Expr?

      def initialize(@keyword, @value); end

      def accept(visitor : Visitor)
        visitor.visit_break_expr(self)
      end
    end

    class Next < Expr
      getter keyword : Token

      def initialize(@keyword); end

      def accept(visitor : Visitor)
        visitor.visit_next_expr(self)
      end
    end

    class Return < Expr
      getter keyword : Token
      getter value : Expr?

      def initialize(@keyword, @value); end

      def accept(visitor : Visitor)
        visitor.visit_return_expr(self)
      end
    end

    class While < Expr
      getter condition : Expr
      getter body : Expr::Block

      def initialize(@condition, @body); end

      def accept(visitor : Visitor)
        visitor.visit_while_expr(self)
      end
    end

    abstract def accept(visitor : Visitor)
  end
end
