#!/usr/bin/env ruby

def to_snake_case(str)
  str.gsub(/([A-Z])/, '_\1').downcase
end

def convert_lox_to_lit(files)
  files.each do |file|
    convert_file(file)
  end
end

# Converts a lox script into a lit one.
# Things to change:
# - // to #
# - var to let
# - fun to fn
# - print to println
# - extension to .lit
# - fun fooBar(a,b) to fn foo_bar { |a, b|
# - fooBar(a,b) to foo_bar(a,b)
# - [line x] Error at 'y': to error: [line x] Error at "y"
#
def convert_file(lox_file_name)
  new_file = lox_file_name.sub(/\.lox$/, '.lit')
  File.open(new_file, "w") do |out|
    # File.open(lox_file_name, "r") do |f|
    #   f.each_line do |line|
    #     out.puts "# #{line.chomp}"
    #   end
    # end
    # out.puts "\n# Converted code\n"
    File.open(lox_file_name, "r") do |f|
      f.each_line do |line|
        line = line.gsub("// ", "# ")
        line = line.gsub("var ", "let ")
        line = line.gsub("class ", "type ")
        line = line.gsub("this", "self")
        line = line.gsub("fun ", "fn ")
        line = line.gsub("print ", "println ")
        line = line.gsub("Error at '", 'Error at "')
        line = line.gsub("':", '":')
        line = line.gsub("[line ", "error: [line ")
        line = line.gsub("expect runtime error: ", "error: ")
        line = line.gsub(/fn (?<name>\w+)\((?<args>.*?)\)\s*\{?/) do |match|
          name = to_snake_case($~[:name])
          "fn #{name} { |#{$~[:args]}|"
        end
        line = line.gsub(/(?<!\w)([a-z]\w*)\(/) do |match|
          "#{to_snake_case($1)}("
        end
        out.puts line
      end
    end
  end
  File.delete(lox_file_name) if lox_file_name.end_with?(".lox")
end

files = Array(ARGV[0] || Dir.glob("spec/e2e/**/*.lox"))
convert_lox_to_lit(files)
