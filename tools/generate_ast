#!/usr/bin/env ruby

module AstGenerator
  extend self

  def run
    output_dir = ARGV.first || "src/lit"

    define_ast(output_dir, "Expr", [
      "ArrayLiteral        = elements : Array(Expr)",
      "Block               = statements : Array(Stmt)",
      "MapLiteral          = entries : Array(Tuple(Expr, Expr))",
      "Assign              = name : Token, value : Expr",
      "Binary              = left : Expr, operator : Token, right : Expr",
      "Call                = callee : Expr, paren : Token, arguments : Array(Expr)",
      "Function            = params : Array(Token), body : Array(Stmt)",
      "Get                 = object : Expr, name : Token",
      "Set                 = object : Expr, name : Token, value : Expr",
      "Grouping            = expression : Expr",
      "Literal             = value : Union(String | Int64 | Float64 | Bool | Nil)",
      "If                  = condition : Expr, then_branch : Expr::Block, else_branch : Expr::Block?",
      "Logical             = left : Expr, operator : Token, right : Expr",
      "Self                = keyword : Token",
      "Unary               = operator : Token, right : Expr",
      "Variable            = name : Token",
      "StringInterpolation = parts : Array(Expr), token : Token",
      "Loop                = body : Expr::Block",
      "Break               = keyword : Token, value : Expr?",
      "Next                = keyword : Token",
      "While               = condition : Expr, body : Expr::Block",
    ])

    define_ast(output_dir, "Stmt", [
      "Type       = name : Token, methods : Array(Stmt::Function)",
      "Expression = expression : Expr",
      "Function   = name : Token, function : Expr::Function",
      "Return     = keyword : Token, value : Expr?",
      "Var        = name : Token, initializer : Expr, mutable : Bool",
    ])
  end

  private def define_ast(output_dir, base_name, types)
    path = output_dir + "/" + base_name.downcase + ".cr"

    File.open(path, "w") do |file|
      file.puts "# WARNING: This file is autogenerated! Please, don't edit it directly."
      file.puts
      file.puts "require \"./token\""
      file.puts
      file.puts "module Lit"
      file.puts "  abstract class #{base_name}"

      define_visitor_interface(file, base_name, types)
      define_ast_types(file, base_name, types)

      file.puts
      file.puts "    abstract def accept(visitor : Visitor)"

      file.puts "  end"
      file.puts "end"
    end
  end

  private def define_visitor_interface(file, base_name, types)
    file.puts "    module Visitor(T)"

    types.each do |type|
      type_name, _ = type.split("=").map(&:strip)
      file.puts "      abstract def visit_#{underscore(type_name)}_#{base_name.downcase}(#{base_name.downcase} : #{type_name}) : T"
    end

    file.puts "    end"
    file.puts
  end

  private def define_ast_types(file, base_name, types)
    types.each_with_index do |type, index|
      class_name, fields = type.split("=").map(&:strip)
      is_last = index == (types.size - 1)

      define_type(file, base_name, class_name, fields, is_last)
    end
  end

  private def define_type(file, base_name, class_name, field_list, is_last)
    file.puts "    class #{class_name} < #{base_name}"

    # Split field list by commas that are not inside parentheses
    fields = field_list.split(/,\s*(?![^()]*\))/)

    define_getters(file, fields)
    define_initializer(file, fields)
    define_visitor(file, class_name, base_name)

    file.puts "    end"
    file.puts unless is_last
  end

  private def define_getters(file, fields)
    fields.each do |field|
      if field.end_with?("Bool")
        file.puts "      getter? #{field}"
      else
        file.puts "      getter #{field}"
      end
    end
    file.puts
  end

  private def define_initializer(file, fields)
    instance_variables = fields.map { |field| "@" + field.split(":").first.strip }
    file.puts "      def initialize(#{instance_variables.join(", ")}); end"
  end

  private def define_visitor(file, class_name, base_name)
    file.puts
    file.puts "      def accept(visitor : Visitor)"
    file.puts "        visitor.visit_#{underscore(class_name)}_#{base_name.downcase}(self)"
    file.puts "      end"
  end

  private def underscore(str)
    str.gsub(/([A-Z])/, '_\1').downcase.sub(/^_/, '')
  end
end

AstGenerator.run
