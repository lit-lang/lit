let say_hello = fn { |n| println("hello {n}") }
let sum = fn { |a, b| a + b }
let a = 1
let b = 2
let c = sum(a, b)

expressions = ['yay', 'wow']
[first, _] = expressions
((first == 'yay') == true) != false

expressions_with_emotion = map(expressions, fn { |exp| exp + '!' })
expressions_with_emotion = map(expressions, it + '!')

github_user_names = {
  dhh: 'David Heinemeier Hansson'
  matz: 'Yukihiro Matsumoto'
}
print(github_user_names.dhh)
# => 'David Heinemeier Hansson'

println(github_user_names['matz'])
# => 'Yukihiro Matsumoto\n'

# for small hashes
point = {x: 1; y: 2}

Math = {
  PI: 3.14159

  pow: (n, m) -> n**m
  half: n -> n / 2

  Circle: {
    circumference: r -> 2 * PI * r
  }
}

List = {
  Empty: []
  empty?: list -> list == List.Empty
  head: list -> {
    if List.empty?(list) then return List.Empty

    head, _ = list

    return head
  }
  tail = list -> {
    if List.empty?(list) then return List.Empty

    _, tail = list

    return tail
  }
  length = list -> {
    if List.empty?(list) then return 0

    return 1 + (list |> pop |> length)
  }
  sum = list -> {
    if List.empty?(list) then return 0

    sumWithAccumulator(list, 0)
  }
  sumWithAccumulator = (list, acc) -> {
    acc + (list |> head |> sumWithAccumulator)
  }
}

# Math.Circle.circumference(r: 2)
# => 12.5663706

AdminUser = {
  admin?: true
}

Email = {
  send: fn { |{from, to}| println("sending email from {from} to {to}") }
}

User = (_name, _email) -> {
  return {
    ...AdminUser # Composition

    name: _name, # constructor
    email: _email, # constructor

    # Methods
    say_hello: fn { println("Hello, I'm {_name}" ) }
    send_email: fn { |content, {to}| Email.send(from: email, to: to, content: content) }
  }
}

me = User('matheus', 'matheus@email.com')
me.say_hello()
me.send_email('Hi!', to: 'matz@ruby.com')

match me.admin? {
  true => println('What?'),
  false => println('Hi, mere mortal')
}

Kernel = {
  times: fn { |n, f|
    if n <= 0 then return 0

    f()

    times(n - 1  f)
  }
}

let mean = fn { |arr| List.sum(arr) / List.length(arr) }
let notes = List.map([0, 0, 0]) { gets() }
notes |> mean |> println

successors = map([1, 2, 3], fn { |i| i + 1 })
successors = map([1, 2, 3], it + 1 )
successors = map([1, 2, 3]) { |i| i + 1 }

describe('List') {
  describe('.map') {
    it('does something') {
      expect(List.map([1, 2, 3], it * 2)).toEq([2, 4, 6])
    }
  }
}
