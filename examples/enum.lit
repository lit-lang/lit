enum List {
  Cons(val, list)
  Empty

  fn size {
    match self {
      Cons(_, list) then 1 + list.size()
      Empty then 0
    }
  }
}

List.Cons(1, List.Cons(2, List.Cons(3, List.Empty))).size()
# => 3

enum Action {
  Quit
  Move { x, y }
  Write(message)
  ChangeColor(r, g, b)
}

fn perform-action { |action|
  match action {
    Quit then exit()
    Move { x, y } {
      println "Move to: {x} {y}"
    }
    Write(message) {
      println message
    }
    ChangeColor(r, g, b) {
      println "Change color to: {r} {g} {b}"
    }
  }
}

if let n = readln.to_int!() {
  match n {
    1 then "one"
    2 then "two"
    3 then "three"
    _ then "{n} is too big"
  }
} else {
  println "Not a number"
}
