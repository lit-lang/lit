module Enumerable {
  fn is_empty? { |enumerable|
    let is_empty? = true;

    self.each { |element|
      is_empty? = false;
      break
    }

    is_empty?
  }

  fn first! {
    let element! = nil

    self.each { |first|
      element! = first
      break
    }

    element!
  }

  fn map { |enumerable, fun|
    let acc = enumerable.type.init()

    enumerable.each { |value|
      acc << fun(value)
    }

    acc
  }

  fn filter { |enumerable, fun|
    let acc = enumerable.init()

    enumerable.each { |value|
      if fun(value) {
        acc << value
      }
    }

    acc
  }

  fn reduce { |enumerable, acc, fun|
    self.each { |value|
      acc = fun(acc, value)
    }

    acc
  }

  fn sum { |initial_acc = 0|
    self.reduce(initial_acc) { |acc, value| acc + fun(value) }
  }
}

type Array {
  fn each([], _fun) { self }
  fn each([head, ...tail], fun) {
    fun(head)
    self.each(tail, fun)
  }
  ...Enumerable
}

type HashMap {
  fn each({}, _fun) { self }
  fn each({key: value, ...tail}, fun) {
    fun([key, value])
    self.each(tail, fun)
  }
  ...Enumerable
}

Array.map([1, 2, 3]) { |x| x * 2 } |> Array.each { println(it) } # 2 4 6

[1, 2, 3].map { |x| x * 2 }.each { println(it) } # 2 4 6

struct List {
  ...Enumerable # include module

  let vals = []

  fn init {
    List.new()
  }

  fn each(fun) {
    if self.any?() {
      let [head, ...tail] = self.vals

      fun(head)
      tail.each(fun)
    }
  }

  fn push(val) {
    self.vals = [val, self.vals]
  }

  fn head! {
    self.vals.first!()
  }
}

