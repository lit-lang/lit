# Single-expression body.
var a = 0
while a < 3 do println(a += 1)
# expect: 1
# expect: 2
# expect: 3

# Parenthesized condition.
var b = 0
while (b < 3) {
  println(b)
  b += 1
}
# expect: 0
# expect: 1
# expect: 2

# Statement bodies.
while false { fn test {} }
while false { type Foo {} }

# return values
debug(while false {}) # expect: nil

var c = 0
println(
  while c < 2 {
    c += 1
    c - 1
  }
) # expect: 1

var d = 0
println(
  inspect(while d < 2 {
    if d == 1 {
      break # break returns nil
    }

    d += 1
  })
) # expect: nil

var e = 0
println(
  inspect(while e < 3 {
    if e == 0 or e == 2 {
      e += 1
      next # next returns nil
    }

    e += 1
    e
  })
) # expect: nil

var f = 0
println(
  while f < 3 {
    if f == 1 {
      break "one"
    }

    f += 1
    f
  }
) # expect: one
