type Vector2D {
  init { |x, y|
    self.x = x
    self.y = y
  }

  add { |other|
    return Vector2D(self.x + other.x, self.y + other.y)
  }

  sub { |other|
    return Vector2D(self.x - other.x, self.y - other.y)
  }

  mul { |other|
    return Vector2D(self.x * other.x, self.y * other.y)
  }

  div { |other|
    return Vector2D(self.x / other.x, self.y / other.y)
  }

  eq { |other|
    return self.x == other.x && self.y == other.y
  }

  lt { |other|
    return self.x < other.x || (self.x == other.x && self.y < other.y)
  }

  lte { |other|
    return self.x < other.x || (self.x == other.x && self.y <= other.y)
  }

  gt { |other|
    return self.x > other.x || (self.x == other.x && self.y > other.y)
  }

  gte { |other|
    return self.x > other.x || (self.x == other.x && self.y >= other.y)
  }

  mod { |other|
    return Vector2D(self.x % other.x, self.y % other.y)
  }

  neg {
    return Vector2D(-self.x, -self.y)
  }

  get { |key|
    if key == "x" {
      return self.x
    } else if key == "y" {
      return self.y
    } else {
      return nil
    }
  }

  set { |key, value|
    if key == "x" {
      self.x = value
    } else if key == "y" {
      self.y = value
    }

    return value
  }

  to_s {
    return "Vector2D({self.x}, {self.y})"
  }
}
type Undef {}

println(-Vector2D(1, 2)) # expect: Vector2D(-1, -2)
println(Vector2D(1, 2) + Vector2D(3, 4) ) # expect: Vector2D(4, 6)
println(Vector2D(1, 2) - Vector2D(3, 4) ) # expect: Vector2D(-2, -2)
println(Vector2D(1, 2) * Vector2D(3, 4) ) # expect: Vector2D(3, 8)
println(Vector2D(4.0, 2) / Vector2D(2, 4) ) # expect: Vector2D(2.0, 0)
println(Vector2D(1, 2) < Vector2D(2, 3) ) # expect: true
println(Vector2D(1, 2) < Vector2D(1, 3) ) # expect: true
println(Vector2D(1, 2) <= Vector2D(2, 2)) # expect: true
println(Vector2D(1, 2) <= Vector2D(1, 3)) # expect: true
println(Vector2D(1, 2) > Vector2D(2, 3) ) # expect: false
println(Vector2D(1, 2) > Vector2D(1, 3) ) # expect: false
println(Vector2D(1, 2) >= Vector2D(2, 2)) # expect: false
println(Vector2D(1, 2) >= Vector2D(1, 3)) # expect: false
println(Vector2D(1, 2) % Vector2D(3, 4) ) # expect: Vector2D(1, 2)
println(Vector2D(1, 2) == Vector2D(1, 2)) # expect: true
println([Vector2D(1, 2)] == [Vector2D(1, 2)]) # expect: true
println({1 : Vector2D(1, 2)} == {1 : Vector2D(1, 2)}) # expect: true
println(Vector2D(1, 2) == Vector2D(2, 2)) # expect: false
println(Vector2D(1, 2) != Vector2D(2, 2)) # expect: true
println(Vector2D(1, 2) != Vector2D(1, 2)) # expect: false
println(Vector2D(1, 2)["x"]) # expect: 1
println(Vector2D(1, 2)["y"]) # expect: 2
debug(Vector2D(1, 2)["z"]) # expect: nil
let v = Vector2D(1, 2)
println(v["x"] = 3) # expect: 3
println(v["x"]) # expect: 3

println(-Undef()) # error: Runtime error: Undefined method 'neg' for Undef.
