

# ignores new lines at beginning and end of the file

fn twice { |x|
  return x + x
}

# ignores new lines after opening and before closing braces
type Foo {

  foo {

    if true {

      loop {

        println("loop break")
        break

      }

      var i =0
      while i == 0 {

        i = i + 1
        println("while next")

        next

      }

      println( 1 ==
          2)

      let a =
        "bar" |>
          twice()

      println(a)

      println(true and
          "and")

      println(false or
          "or")

      println("bar" ==
          "bar")

      println("bar" !=
          "bar")

      println(1 <
          2)

      println(1 >
          2)

      println(1 <=
          2)

      println(1 >=
          2)

      println(1 +
          2)

      println(1 -
          2)

      println(1 *
          2)

      println(1 /
          2)

      println(1 %
          2)

      println(twice(

        (

          1 + 1

        )

      )
      )

      println( [
        1,

        2
        ,

        3,
      ])

      println( {

        "foo" : "bar",

        "bar" : "foo",

      })

    } else {

      var a = 2

    }

  }

}

Foo().
  foo()

# expect: loop break
# expect: while next
# expect: false
# expect: barbar
# expect: and
# expect: or
# expect: true
# expect: false
# expect: true
# expect: false
# expect: true
# expect: false
# expect: 3
# expect: -1
# expect: 2
# expect: 0
# expect: 1
# expect: 4
# expect: [1, 2, 3]
# expect: {"foo" : "bar", "bar" : "foo"}
