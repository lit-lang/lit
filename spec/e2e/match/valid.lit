fn number_as_word do match it {
  2 then "two"
  1 then "one"
  3, 4 then "three or four"
  _ then "too big"
}

debug(number_as_word(1)) # expect: "one"
debug(number_as_word(2)) # expect: "two"
debug(number_as_word(3)) # expect: "three or four"
debug(number_as_word(4)) # expect: "three or four"
debug(number_as_word(5)) # expect: "too big"

fn word_to_number do match it {
  "zero",
  "none", then 0
  "one" then 1
  "two" then 2
  _ then -1
}
debug(word_to_number("one")) # expect: 1
debug(word_to_number("two")) # expect: 2
debug(word_to_number("zero")) # expect: 0
debug(word_to_number("none")) # expect: 0
debug(word_to_number("other")) # expect: -1

fn is_empty do match it {
  [] then true
  {:} then true
  _ then false
}
debug(is_empty([])) # expect: true
debug(is_empty({:})) # expect: true
debug(is_empty([1])) # expect: false
debug(is_empty({1 : 2})) # expect: false

type Foo {
  init do |a| self.a = a
  eq { |other|
    if typeof(other) != 'Foo' do return false

    self.a == other.a
  }
}
type Bar {}
fn compare_foo { |foo|
  match foo {
    Foo(1) then "Foo 1"
    Foo then "different Foo"
    _ then "not Foo"
  }
}

debug(compare_foo(Foo(1))) # expect: "Foo 1"
debug(compare_foo(Foo(2))) # expect: "different Foo"
debug(compare_foo(Bar())) # expect: "not Foo"
